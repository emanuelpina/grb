#!/usr/bin/env bash

## Configurable varibales

installdir="/usr/local/bin"     # Installation directory
tmpdir="/tmp"                   # Temporary directory for where files will be downloaded and extracted

## END of configurable variables

# Variables
dependencies=("bzip2" "curl" "rsync" "tar" "unzip" "wget")
apps=("bat" "bottom" "ctop" "duf" "dust" "eza" "fzf" "github" "hcloud" "helix" "hugo" "rclone" "restic" "starship" "zoxide")
options=("dependencies" "help" "install" "info" "self-update" "update" "uninstall" "version")
scriptversion="1.9.1"

# Check architecture
check_arch () {
	arch_supported=("aarch64" "x86_64")
	arch=$(uname -m)
	if ! [[ "${arch_supported[@]}" =~ (^|[[:space:]])"$arch"($|[[:space:]]) ]]; then
		printf "ERROR: Architecture not supported!\n\n"
		help
		exit 1
	fi
}

# Check arguments count
argscount=$#
check_argscount () {
	if [ $argscount -lt $1 ]; then
		printf "ERROR: Missing arguments!\n\n"
		help
		exit 1
	fi
	if [ $argscount -gt $2 ]; then
		printf "ERROR: Too many arguments!\n\n"
		help
		exit 1
	fi
}

# Check for and change command to app alias
check_app_alias () {
	app_command=$1
	if [ $1 = "bottom" ]; then app_command="btm"; fi
	if [ $1 = "github" ]; then app_command="gh"; fi
	if [ $1 = "helix" ]; then app_command="hx"; fi
}

# Check if package is intalled
check_package () {
	check_app_alias $1
	command -v $app_command >/dev/null 2>&1 \
	&& printf "%s is installed\n" $1 \
	|| printf "%s is NOT installed\n" $1
}

# Check dependecies
check_dependencies () {
	for i in "${dependencies[@]}"
	do
		command -v $i >/dev/null 2>&1 || {
		printf "A required package is missing: %s\n" $i
		exit 1;
		}
	done
}

# Print help
help () {
	if [ "$1" = "help" ]; then
		printf "%s v%s\nA Go and Rust binaries installer\n\n" $(basename $0) $scriptversion
	fi
	printf "Usage: %s [OPTION] [APP]\n" $(basename $0)
	printf "Example: %s install bat\n\n" $(basename $0)
	printf "Options:\n"
	printf "\tdependencies\t\t - list all dependencies and check if they're installed\n"
	printf "\thelp\t\t\t - print this help message\n"
	printf "\tinfo\t\t\t - list all apps and check if they're installed\n"
	printf "\tinfo [APP]\t\t - check if an app is installed and its local and latest available versions\n"
	printf "\tinstall [APP]\t\t - install an app\n"
	printf "\tinstall [APP] [VERSION]\t - install a specific version of an app\n"
	printf "\tself-update\t\t - update %s to its latest version\n" $(basename $0)
	printf "\tupdate [APP]\t\t - update an app to its latest version\n"
	printf "\tupdate [APP] [VERSION]\t - update an app to a specific version\n"
	printf "\tuninstall [APP]\t\t - uninstall an app\n"
	printf "\tversion\t\t\t - print %s version\n\n" $(basename $0)
	printf "Available apps:\n"
	printf "\tbat\t - A cat(1) clone with wings\n"
	printf "\tbottom\t - Yet another cross-platform graphical process/system monitor\n"
	printf "\tctop\t - Top-like interface for container metrics\n"
	printf "\tduf\t - Disk Usage/Free Utility - a better 'df' alternative\n"
	printf "\tdust\t - A more intuitive version of du in rust\n"
	printf "\teza\t - A modern replacement for ‘ls’\n"
	printf "\tfzf\t - A command-line fuzzy finder\n"
	printf "\tgithub\t - GitHub’s official command line tool\n"
	printf "\thcloud\t - A command-line interface for Hetzner Cloud\n"
	printf "\thelix\t - A post-modern modal text editor\n"
	printf "\thugo\t - The world’s fastest framework for building websites\n"
	printf "\trclone\t - rsync for cloud storage\n"
	printf "\trestic\t - Fast, secure, efficient backup program\n"
	printf "\tstarship - The minimal, blazing-fast, and infinitely customizable prompt for any shell\n"
	printf "\tzoxide\t - A smarter cd command\n"
	printf "\n"
}

# Prompt to confirm action
confirmation () {
	while true; do
		read -p "${1} ${2}. Are you sure? [y/n] " yn
		case $yn in
			[Yy][Ee][Ss]|[Yy] ) printf "\n"; break;;
			[Nn][Oo]|[Nn] ) exit 0;;
			* ) printf "\vPlease answer yes or no.\n";;
		esac
	done
}

# Check latest version
check_latest () {
	if [ $1 = "bat" ]; then	repo="sharkdp/bat"; fi
  if [ $1 = "bottom" ]; then repo="ClementTsang/bottom"; fi
	if [ $1 = "ctop" ]; then repo="bcicen/ctop"; fi
	if [ $1 = "duf" ]; then repo="muesli/duf"; fi
	if [ $1 = "dust" ]; then repo="bootandy/dust"; fi
	if [ $1 = "eza" ]; then repo="eza-community/eza"; fi
	if [ $1 = "fzf" ]; then repo="junegunn/fzf"; fi
	if [ $1 = "github" ]; then repo="cli/cli"; fi
	if [ $1 = "hcloud" ]; then repo="hetznercloud/cli"; fi
	if [ $1 = "helix" ]; then repo="helix-editor/helix"; fi
	if [ $1 = "hugo" ]; then repo="gohugoio/hugo"; fi
	if [ $1 = "rclone" ]; then repo="rclone/rclone"; fi
	if [ $1 = "restic" ]; then repo="restic/restic"; fi
	if [ $1 = "starship" ]; then repo="starship/starship"; fi
	if [ $1 = "zoxide" ]; then repo="ajeetdsouza/zoxide"; fi

	if [ $1 = "bottom" ] || [ $1 = "helix" ] ; then
		latestrelease=$(curl -s "https://api.github.com/repos/$repo/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
	else
		latestrelease=$(curl -s "https://api.github.com/repos/$repo/releases/latest" | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
	fi
}

# Check local version
check_local_version () {
	if [ $1 = hcloud ] || [ $1 = hugo ] || [ $1 = restic ]; then
		localversion=$($1 version)
	elif [ $1 = ctop ]; then
		localversion=$($1 -v)
	else
		localversion=$($1 --version)
	fi
}

# Install functions
install_bat () {
	printf "Downloading...\n" && \
	check_latest bat && \
	if ! [ -z "$1" ]; then latestrelease="${1}"; fi && \
	if [ $arch = "aarch64" ]; then filename="bat-v$latestrelease-aarch64-unknown-linux-gnu"; fi && \
	if [ $arch = "x86_64" ]; then filename="bat-v$latestrelease-x86_64-unknown-linux-gnu"; fi && \
	mkdir $tmpdir/bat && cd $tmpdir/bat && \
	wget -q https://github.com/sharkdp/bat/releases/download/v$latestrelease/${filename}.tar.gz && \
	printf "Unpacking...\n" && \
	tar -xf ${filename}.tar.gz && \
	printf "Installing...\n" && \
	rsync --archive --chown=root:root $tmpdir/bat/${filename}/bat $installdir/ && \
	printf "Cleaning up...\n" && \
	rm -rf $tmpdir/bat && \
	printf "Done!\n"
}
install_bottom () {
	printf "Downloading...\n" && \
	check_latest bottom && \
	if ! [ -z "$1" ]; then latestrelease="${1}"; fi && \
	if [ $arch = "aarch64" ]; then filename="bottom_aarch64-unknown-linux-gnu.tar.gz"; fi && \
	if [ $arch = "x86_64" ]; then filename="bottom_x86_64-unknown-linux-gnu.tar.gz"; fi && \
	mkdir $tmpdir/bottom && cd $tmpdir/bottom && \
	wget -q https://github.com/ClementTsang/bottom/releases/download/$latestrelease/$filename && \
	printf "Unpacking...\n" && \
	tar -xf $filename && \
	printf "Installing...\n" && \
	rsync --archive --chown=root:root $tmpdir/bottom/btm $installdir/ && \
	printf "Cleaning up...\n" && \
	rm -rf $tmpdir/bottom && \
	printf "Done!\n"
}
install_ctop () {
	printf "Downloading...\n" && \
	check_latest ctop && \
	if ! [ -z "$1" ]; then latestrelease="${1}"; fi && \
	if [ $arch = "aarch64" ]; then filename="ctop-$latestrelease-linux-arm64"; fi && \
	if [ $arch = "x86_64" ]; then filename="ctop-$latestrelease-linux-amd64"; fi && \
	mkdir $tmpdir/ctop && cd $tmpdir/ctop && \
	wget -q https://github.com/bcicen/ctop/releases/download/v$latestrelease/$filename && \
	printf "Installing...\n" && \
	rsync --archive --chown=root:root --chmod=+x $tmpdir/ctop/$filename $installdir/ && \
	mv $installdir/$filename $installdir/ctop && \
	printf "Cleaning up...\n" && \
	rm -rf $tmpdir/ctop && \
	printf "Done!\n"
}
install_duf () {
	printf "Downloading...\n" && \
	check_latest duf && \
	if ! [ -z "$1" ]; then latestrelease="${1}"; fi && \
	if [ $arch = "aarch64" ]; then filename="duf_${latestrelease}_linux_arm64.tar.gz"; fi && \
	if [ $arch = "x86_64" ]; then filename="duf_${latestrelease}_linux_x86_64.tar.gz"; fi && \
	mkdir $tmpdir/duf && cd $tmpdir/duf && \
	wget -q https://github.com/muesli/duf/releases/download/v$latestrelease/$filename && \
	printf "Unpacking...\n" && \
	tar -xf $filename && \
	printf "Installing...\n" && \
	rsync --archive --chown=root:root $tmpdir/duf/duf $installdir/ && \
	printf "Cleaning up...\n" && \
	rm -rf $tmpdir/duf && \
	printf "Done!\n"
}
install_dust () {
	printf "Downloading...\n" && \
	check_latest dust && \
	if ! [ -z "$1" ]; then latestrelease="${1}"; fi && \
	if [ $arch = "aarch64" ]; then filename="dust-v$latestrelease-aarch64-unknown-linux-gnu"; fi && \
	if [ $arch = "x86_64" ]; then filename="dust-v$latestrelease-x86_64-unknown-linux-gnu"; fi && \
	mkdir $tmpdir/dust && cd $tmpdir/dust && \
	wget -q https://github.com/bootandy/dust/releases/download/v$latestrelease/${filename}.tar.gz && \
	printf "Unpacking...\n" && \
	tar -xf ${filename}.tar.gz && \
	printf "Installing...\n" && \
	rsync --archive --chown=root:root $tmpdir/dust/${filename}/dust $installdir/ && \
	printf "Cleaning up...\n" && \
	rm -rf $tmpdir/dust && \
	printf "Done!\n"
}
install_eza () {
	printf "Downloading...\n" && \
	check_latest eza && \
	if ! [ -z "$1" ]; then latestrelease="${1}"; fi && \
	if [ $arch = "aarch64" ]; then filename="eza_aarch64-unknown-linux-gnu.zip"; fi && \
	if [ $arch = "x86_64" ]; then filename="eza_x86_64-unknown-linux-gnu.zip"; fi && \
	mkdir $tmpdir/eza && cd $tmpdir/eza && \
	wget -q https://github.com/eza-community/eza/releases/download/v$latestrelease/$filename && \
	printf "Unpacking...\n" && \
	unzip -xq $filename && \
	printf "Installing...\n" && \
	rsync --archive --chown=root:root $tmpdir/eza/eza $installdir/ && \
	printf "Cleaning up...\n" && \
	rm -rf $tmpdir/eza && \
	printf "Done!\n"
}
install_fzf () {
	printf "Downloading...\n" && \
	check_latest fzf && \
	if ! [ -z "$1" ]; then latestrelease="${1}"; fi && \
	if [ $arch = "aarch64" ]; then filename="fzf-${latestrelease}-linux_arm64.tar.gz"; fi && \
	if [ $arch = "x86_64" ]; then filename="fzf-${latestrelease}-linux_amd64.tar.gz"; fi && \
	mkdir $tmpdir/fzf && cd $tmpdir/fzf && \
	wget -q https://github.com/junegunn/fzf/releases/download/v$latestrelease/$filename && \
	printf "Unpacking...\n" && \
	tar -xf $filename && \
	printf "Installing...\n" && \
	rsync --archive --chown=root:root $tmpdir/fzf/fzf $installdir/ && \
	printf "Cleaning up...\n" && \
	rm -rf $tmpdir/fzf && \
	printf "Done!\n"
}
install_github () {
	printf "Downloading...\n" && \
	check_latest github && \
	if ! [ -z "$1" ]; then latestrelease="${1}"; fi && \
	if [ $arch = "aarch64" ]; then filename="gh_${latestrelease}_linux_arm64"; fi && \
	if [ $arch = "x86_64" ]; then filename="gh_${latestrelease}_linux_amd64"; fi && \
	mkdir $tmpdir/github && cd $tmpdir/github && \
	wget -q https://github.com/cli/cli/releases/download/v$latestrelease/${filename}.tar.gz && \
	printf "Unpacking...\n" && \
	tar -xf ${filename}.tar.gz && \
	printf "Installing...\n" && \
	rsync --archive --chown=root:root $tmpdir/github/${filename}/bin/gh $installdir/ && \
	printf "Cleaning up...\n" && \
	rm -rf $tmpdir/github && \
	printf "Done!\n"
}
install_hcloud () {
	printf "Downloading...\n" && \
	check_latest hcloud && \
	if ! [ -z "$1" ]; then latestrelease="${1}"; fi && \
	if [ $arch = "aarch64" ]; then filename="hcloud-linux-arm64.tar.gz"; fi && \
	if [ $arch = "x86_64" ]; then filename="hcloud-linux-amd64.tar.gz"; fi && \
	mkdir $tmpdir/hcloud && cd $tmpdir/hcloud && \
	wget -q https://github.com/hetznercloud/cli/releases/download/v$latestrelease/$filename && \
	printf "Unpacking...\n" && \
	tar -xf $filename && \
	printf "Installing...\n" && \
	rsync --archive --chown=root:root $tmpdir/hcloud/hcloud $installdir/ && \
	printf "Cleaning up...\n" && \
	rm -rf $tmpdir/hcloud && \
	printf "Done!\n"
}
install_helix () {
	printf "Downloading...\n" && \
	check_latest helix && \
	if ! [ -z "$1" ]; then latestrelease="${1}"; fi && \
	if [ $arch = "aarch64" ]; then filename="helix-$latestrelease-aarch64-linux"; fi && \
	if [ $arch = "x86_64" ]; then filename="helix-$latestrelease-x86_64-linux"; fi && \
	mkdir $tmpdir/helix && cd $tmpdir/helix && \
	wget -q https://github.com/helix-editor/helix/releases/download/$latestrelease/${filename}.tar.xz && \
	printf "Unpacking...\n" && \
	tar -xf ${filename}.tar.xz && \
	printf "Installing...\n" && \
	rsync --archive --chown=root:root $tmpdir/helix/${filename}/hx $installdir/ && \
	rsync --archive --chown=root:root $tmpdir/helix/${filename}/runtime $installdir/ && \
	printf "Cleaning up...\n" && \
	rm -rf $tmpdir/helix && \
	printf "Done!\n"
}
install_hugo () {
	printf "Downloading...\n" && \
	check_latest hugo && \
	if ! [ -z "$1" ]; then latestrelease="${1}"; fi && \
	if [ $arch = "aarch64" ]; then filename="hugo_extended_${latestrelease}_linux-arm64.tar.gz"; fi && \
	if [ $arch = "x86_64" ]; then filename="hugo_extended_${latestrelease}_linux-amd64.tar.gz"; fi && \
	mkdir $tmpdir/hugo && cd $tmpdir/hugo && \
	wget -q https://github.com/gohugoio/hugo/releases/download/v$latestrelease/$filename && \
	printf "Unpacking...\n" && \
	tar -xf $filename && \
	printf "Installing...\n" && \
	rsync --archive --chown=root:root $tmpdir/hugo/hugo $installdir/ && \
	printf "Cleaning up...\n" && \
	rm -rf $tmpdir/hugo && \
	printf "Done!\n"
}
install_rclone () {
	printf "Downloading...\n" && \
	check_latest rclone && \
	if ! [ -z "$1" ]; then latestrelease="${1}"; fi && \
	if [ $arch = "aarch64" ]; then filename="rclone-v$latestrelease-linux-arm64"; fi && \
	if [ $arch = "x86_64" ]; then filename="rclone-v$latestrelease-linux-amd64"; fi && \
	mkdir $tmpdir/rclone && cd $tmpdir/rclone && \
	wget -q https://github.com/rclone/rclone/releases/download/v$latestrelease/${filename}.zip && \
	printf "Unpacking...\n" && \
	unzip -xq ${filename}.zip && \
	printf "Installing...\n" && \
	rsync --archive --chown=root:root $tmpdir/rclone/${filename}/rclone $installdir/ && \
	printf "Cleaning up...\n" && \
	rm -rf $tmpdir/rclone && \
	printf "Done!\n"
}
install_restic () {
	printf "Downloading...\n" && \
	check_latest restic && \
	if ! [ -z "$1" ]; then latestrelease="${1}"; fi && \
	if [ $arch = "aarch64" ]; then filename="restic_${latestrelease}_linux_arm64"; fi && \
	if [ $arch = "x86_64" ]; then filename="restic_${latestrelease}_linux_amd64"; fi && \
	mkdir $tmpdir/restic && cd $tmpdir/restic && \
	wget -q https://github.com/restic/restic/releases/download/v$latestrelease/${filename}.bz2 && \
	printf "Unpacking...\n" && \
	bzip2 -d ${filename}.bz2 && \
	printf "Installing...\n" && \
	rsync --archive --chown=root:root --chmod=+x $tmpdir/restic/$filename $installdir/ && \
	mv $installdir/$filename $installdir/restic && \
	printf "Cleaning up...\n" && \
	rm -rf $tmpdir/restic && \
	printf "Done!\n"
}
install_starship () {
	printf "Downloading...\n" && \
	check_latest starship && \
	if ! [ -z "$1" ]; then latestrelease="${1}"; fi && \
	if [ $arch = "aarch64" ]; then filename="starship-aarch64-unknown-linux-musl"; fi && \
	if [ $arch = "x86_64" ]; then filename="starship-x86_64-unknown-linux-musl"; fi && \
	mkdir $tmpdir/starship && cd $tmpdir/starship && \
	wget -q https://github.com/starship/starship/releases/download/v$latestrelease/${filename}.tar.gz && \
	printf "Unpacking...\n" && \
	tar -xf ${filename}.tar.gz && \
	printf "Installing...\n" && \
	rsync --archive --chown=root:root $tmpdir/starship/starship $installdir/ && \
	printf "Cleaning up...\n" && \
	rm -rf $tmpdir/starship && \
	printf "Done!\n"
}
install_zoxide () {
	printf "Downloading...\n" && \
	check_latest zoxide && \
	if ! [ -z "$1" ]; then latestrelease="${1}"; fi && \
	if [ $arch = "aarch64" ]; then filename="zoxide-${latestrelease}-aarch64-unknown-linux-musl.tar.gz"; fi && \
	if [ $arch = "x86_64" ]; then filename="zoxide-${latestrelease}-x86_64-unknown-linux-musl.tar.gz"; fi && \
	mkdir $tmpdir/zoxide && cd $tmpdir/zoxide && \
	wget -q https://github.com/ajeetdsouza/zoxide/releases/download/v$latestrelease/$filename && \
	printf "Unpacking...\n" && \
	tar -xf $filename && \
	printf "Installing...\n" && \
	rsync --archive --chown=root:root $tmpdir/zoxide/zoxide $installdir/ && \
	printf "Cleaning up...\n" && \
	rm -rf $tmpdir/zoxide && \
	printf "Done!\n"
}

# Check if running as sudo
if [[ $UID != 0 ]]; then
	printf "Please run %s with sudo.\nExample: sudo %s %s\n" $(basename $0) $(basename $0) "$*"
	exit 1
fi

# Give error message if no arguments
if [ $# -eq 0 ]; then
	printf "ERROR: Missing arguments!\n\n"
	help
	exit 1
fi

# Give error message if no valid option
if ! [[ "${options[@]}" =~ (^|[[:space:]])"$1"($|[[:space:]]) ]]; then
	printf "ERROR: No valid option!\n\n"
	help
	exit 1
fi

# Dependecies option
if [ $1 = "dependencies" ]; then
	check_argscount 1 1
	for i in "${dependencies[@]}"
		do
			check_package $i
	done
fi

# Help option
if [ $1 = "help" ]; then
	check_argscount 1 1
	help $1
fi

# Install option
if [ $1 = "install" ]; then
	check_argscount 2 3
	if ! [[ "${apps[@]}" =~ (^|[[:space:]])"$2"($|[[:space:]]) ]]; then
		printf "ERROR: No valid app!\n\n"
		help
		exit 1
	fi
	check_app_alias $2
	if command -v $app_command >/dev/null 2>&1; then
		printf "%s is ALREADY installed\nUse the update command to get the latest release\n" $2
		printf "Example: sudo %s update %s\n" $(basename $0) $2
		exit 1
	fi
	check_arch && \
	check_dependencies && \
	confirmation Installing $2 && \
	install_$2 $3
fi

# Info option
if [ $1 = "info" ] && [ $# -eq 1 ]; then
	for i in "${apps[@]}"
		do
			check_package $i
		done
fi
if [ $1 = "info" ] && [ $# -eq 2 ]; then
	if ! [[ "${apps[@]}" =~ (^|[[:space:]])"$2"($|[[:space:]]) ]]; then
		printf "ERROR: No valid app!\n\n"
		help
		exit 1
	fi
	check_app_alias $2
	if command -v $app_command >/dev/null 2>&1; then
		printf "%s is installed\n\n" $app_command
		check_local_version $app_command && \
		printf "Local version:\n%s\n\n" "$localversion"
	else
		printf "%s is NOT installed\n" $2
	fi
	check_latest $2 && \
	printf "Latest release:\n%s\n" $latestrelease
fi
if [ $1 = "info" ] && [ $# -gt 2 ];then
	printf "ERROR: Too many arguments!\n\n"
	help
	exit 1
fi

# Self-update option
if [ $1 = "self-update" ]; then
	check_argscount 1 1
	confirmation Updating $(basename $0) && \
	printf "Downloading...\n" && \
	cd $tmpdir && \
	wget -q https://raw.githubusercontent.com/emanuelpina/grb/main/grb && \
	printf "Installing...\n" && \
	chown root:root $tmpdir/grb && \
	chmod +x $tmpdir/grb && \
	mv $tmpdir/grb $installdir/ && \
	newversion=$(sudo grb version | cut -c 6-10)
	printf "Done!\n\n%s is now at v%s\n" $(basename $0) $newversion
fi

# Update option
if [ $1 = "update" ]; then
	check_argscount 2 3
	if ! [[ "${apps[@]}" =~ (^|[[:space:]])"$2"($|[[:space:]]) ]]; then
		printf "ERROR: No valid app!\n\n"
		help
		exit 1
	fi
	check_app_alias $2
	if ! command -v $app_command >/dev/null 2>&1; then
		printf "%s is NOT installed\nUse the install command to get it\n" $2
		printf "Example: sudo %s install %s\n" $(basename $0) $2
		exit 1
	fi
	check_arch && \
	check_dependencies && \
	confirmation Updating $2 && \
	install_$2 $3
fi

# Uninstall option
if [ $1 = "uninstall" ]; then
	check_argscount 2 2
	if ! [[ "${apps[@]}" =~ (^|[[:space:]])"$2"($|[[:space:]]) ]]; then
		printf "ERROR: No valid app!\n\n"
		help
		exit 1
	fi
	check_app_alias $2
	if ! command -v $app_command >/dev/null 2>&1; then
		printf "ERROR: %s is NOT installed\n" $2
		exit 1
	fi
	confirmation Uninstalling $2
	rm -rf $installdir/$app_command
	if [ $2 = "helix" ]; then
		rm -rf $installdir/runtime
	fi
	printf "Done!\n"
fi

if [ $1 = "version" ]; then
	check_argscount 1 1
	printf "%s v%s\n" $(basename $0) $scriptversion
fi
